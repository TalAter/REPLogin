{"version":3,"sources":["../../src/app.react.js"],"names":["focusOnInput","document","getElementById","focus","REPLcommands","destination","filename","permission","command","args","newState","state","whoami","sudo","setState","REPL","React","createClass","getInitialState","outputBuffer","key","text","READ","event","preventDefault","input","value","toLowerCase","EVALUATE","PERMISSION_GRANTED","runCommand","concat","PRINT","undefined","LOOP","split","output","push","length","apply","componentDidMount","render","outputLines","map","line","ReactDOM"],"mappings":"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","file":"app.js","sourcesContent":["/*************************/\n/* REPL's Little Helpers */\n/*************************/\n\n// Places cursor on the text input.\nvar focusOnInput = () => {\n  document.getElementById('repl-text-input').focus();\n};\n\n\n/*****************/\n/* REPL commands */\n/*****************/\n\nvar REPLcommands = {\n  \"help\": function() {\n    return (\n      <div>\n        <br />\n        <p><strong>Welcome to REPLogin.</strong></p>\n        <p>Here are some commands you can try:</p>\n        <p><em>ls</em>     List directory contents</p>\n        <p><em>cd</em>     Change the current working directory.</p>\n        <p><em>pwd</em>    Print name of current/working directory.</p>\n        <p><em>cat</em>    Show the contents of a file.</p>\n        <p><em>sudo</em>   Execute a command as another user.</p>\n      </div>\n    )\n  },\n  \"cd\": function(destination) {\n    if (destination === '.') {\n      return (<div>There and back again.</div>);\n    } else {\n      return (<div>None shall pass!</div>);\n    }\n  },\n  \"ls\": function() {\n    return (\n      <div>\n        <div>drwx------  7 tal  tal   4096 Sep 7  17:08 .</div>\n        <div>drwxr-xr-x  3 root root  4096 Sep 8  12:29 ..</div>\n        <div>-rw-------  1 root root   304 Sep 8  13:22 <em>passwords</em></div>\n      </div>\n    )\n  },\n  \"ll\": function() {\n    return REPLcommands[\"ls\"]();\n  },\n  \"pwd\": function() {\n    return (\n      <div>/Users/tal</div>\n    )\n  },\n  \"./passwords\": function() {\n    return REPLcommands[\"passwords\"]();\n  },\n  \"passwords\": function() {\n    return (\n      <div>\n        <div>command not found: passwords</div>\n        <div>Try using <strong>cat</strong> to view the contents of this file.</div>\n      </div>\n    )\n  },\n  \"cat\": function(filename, permission) {\n    if (!filename) {\n      return (<div>cat: Requires a filename as its first argument</div>);\n    }\n    if (filename !== 'passwords') {\n      return (<div>cat: {filename}: No such file or directory</div>);\n    }\n    if (permission) {\n      return (\n        <div>\n          <img src=\"https://cdn.meme.am/instances/53376060.jpg\" />\n          <div><a href=\"/requirements.html\">How did we do?</a></div>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <div>cat: {filename}: Permission denied</div>\n          <div>Have you tried <strong>sudo cat {filename}</strong>?</div>\n        </div>\n      );\n    }\n  },\n  \"sudo\": function(command, ...args) {\n    let newState = this.state;\n    newState.whoami = '[sudo] password for tal:';\n    // save the command we are trying to sudo for later\n    newState.sudo = {command: command, args: args};\n    this.setState(newState);\n    return (\n      <div>\n        You need to be \"logged in\" as root.\n      </div>\n    );\n  }\n};\n\n\n/********************/\n/* React components */\n/********************/\n\nvar REPL = React.createClass({\n\n  getInitialState: function() {\n    return {\n      outputBuffer: [\n        {key: 0, text: 'Welcome to REPLogin'},\n        {key: 1, text: 'Last login: Thu Sep 8 06:05:15 2016 from 46.120.5.205 (not really)'},\n        {key: 2, text: '-bash: warning: This is not bash'},\n        {key: 3, text: 'For a list of available commands, try typing help'}\n      ],\n      whoami: '[tal@ater ~] $'\n    };\n  },\n\n  // Reads a command that was just submitted and passes it to EVALUATE\n  READ: function(event) {\n    event.preventDefault();\n    var input = document.getElementById('repl-text-input').value.toLowerCase();\n    this.EVALUATE(input);\n  },\n\n  // Evaluate a command and passes it and its result to PRINT, then loops\n  EVALUATE: function(input) {\n    // Are we doing a password check right now?\n    if (this.state.sudo) {\n      if (input === '12345') {\n        let PERMISSION_GRANTED = true;\n        this.runCommand(this.state.sudo.command, this.state.sudo.args.concat(PERMISSION_GRANTED));\n      } else {\n        this.PRINT('sudo: incorrect password');\n      }\n      let newState = this.state;\n      newState.sudo = undefined;\n      newState.whoami = '[tal@ater ~] $';\n      this.setState(newState);\n      this.LOOP();\n      return;\n    }\n\n    // Output the input as one does from time to time\n    this.PRINT(\n      this.state.whoami+' ' + input\n    );\n\n    let command, args;\n    // Destructuring and rest for the win!\n    [command, ...args] = input.split(' ');\n    // Check if command exists\n    this.runCommand(command, args);\n    this.LOOP();\n  },\n\n  // Prints output from a command\n  PRINT: function(output) {\n    let newState = this.state;\n    newState.outputBuffer.push({key: newState.outputBuffer.length+1, text: output});\n    this.setState(newState);\n  },\n\n  // Clears and focuses input again\n  LOOP: function() {\n    document.getElementById('repl-text-input').value='';\n    focusOnInput();\n  },\n\n  // Make sure a command exists, then run it with its arguments\n  runCommand: function(command, args) {\n    if (REPLcommands[command]) {\n      this.PRINT(\n        REPLcommands[command].apply(this, args)\n      );\n    } else {\n      this.PRINT('command not found: '+command);\n    }\n  },\n\n  componentDidMount: focusOnInput,\n\n  render: function() {\n    var outputLines = this.state.outputBuffer.map(\n      (line) => ( <div key={line.key}>{line.text}</div> )\n    );\n    return (\n      <div className=\"repl-container\">\n        <div className=\"repl-output\">\n          {outputLines}\n        </div>\n        <div className=\"repl-input\">\n          <span className=\"whoami\">{this.state.whoami}</span>\n          <form onSubmit={this.READ}>\n            <input onBlur={focusOnInput} id=\"repl-text-input\"></input>\n          </form>\n        </div>\n      </div>\n    );\n  }\n\n});\n\n\n/***************/\n/* VROOM VROOM */\n/***************/\n\nReactDOM.render(\n  <REPL />,\n  document.getElementById('repl')\n);\n"]}